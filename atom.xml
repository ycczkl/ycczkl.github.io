<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Kelun | Blog]]></title>
  <subtitle><![CDATA[A code monkey with a simple dream]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://kelunblog.com/"/>
  <updated>2015-02-27T04:22:02.283Z</updated>
  <id>http://kelunblog.com/</id>
  
  <author>
    <name><![CDATA[Kelun Zhang]]></name>
    <email><![CDATA[ycczkl@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何恶心钓鱼网站？]]></title>
    <link href="http://kelunblog.com/2015/02/03/%E5%A6%82%E4%BD%95%E6%81%B6%E5%BF%83%E9%92%93%E9%B1%BC%E7%BD%91%E7%AB%99%EF%BC%9F/"/>
    <id>http://kelunblog.com/2015/02/03/如何恶心钓鱼网站？/</id>
    <published>2015-02-03T15:24:54.000Z</published>
    <updated>2015-02-03T02:29:41.000Z</updated>
    <content type="html"><![CDATA[<p>今儿群里有人被盗号了，这次闲来无事第一次分析了下钓鱼网站<a href="http://www.xhagri.gov.cn/15.htm?M0Zpp" target="_blank" rel="external">链接</a>的代码。<br><img src="https://dn-cnode.qbox.me/FkjHaheOvyk_a0DdcdNe-H-1DTTW" alt="服务器地址"><br>whois一下发现服务器在HK。再看看里面代码发现也就是最最简单的表单提交：<br> <img src="https://dn-cnode.qbox.me/Fj7EKudx3aMgKn01bZojxGvi6Bts" alt="表单提交部分的代码"><br> 于是我就想恶心恶心这帮人，顺手写了个机器人注入僵尸用户。。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rest = <span class="built_in">require</span>(<span class="string">'restler'</span>);</div><div class="line"><span class="keyword">var</span> generatePassword = <span class="built_in">require</span>(<span class="string">'password-generator'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> minutes = <span class="number">0.05</span>,</div><div class="line">  the_interval = minutes * <span class="number">60</span> * <span class="number">1000</span>;</div><div class="line"></div><div class="line">setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> id = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="number">8</span>));</div><div class="line">  <span class="keyword">var</span> pw = generatePassword(getRandomInt(<span class="number">6</span>, <span class="number">15</span>), <span class="literal">false</span>);</div><div class="line">  rest.post(<span class="string">'http://xn--a-oda8n.ifcru.org/admin/api.php'</span>, {</div><div class="line">    query: {</div><div class="line">      user: <span class="string">'M0Zpp'</span></div><div class="line">    },</div><div class="line">    data: {</div><div class="line">      username: id,</div><div class="line">      password: pw</div><div class="line">    },</div><div class="line">  }).on(<span class="string">'complete'</span>, <span class="function"><span class="keyword">function</span><span class="params">(data, response)</span> </span>{</div><div class="line">    <span class="keyword">if</span> (response.statusCode == <span class="number">200</span>) {</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'success'</span>);</div><div class="line">    }</div><div class="line">  });</div><div class="line">}, the_interval);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomInt</span><span class="params">(min, max)</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min)) + min;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>第一次写这种东西的代码，水平有限哈。。大家有没有神马更好的恶心人得办法？ 欢迎一起讨论！<br>PS: 目前已经五进程攻击一个晚上了，服务器IP还没换，估计快了~</p>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[Learning lo-dash.js]]></title>
    <link href="http://kelunblog.com/2014/12/25/Learning-lo-dashjs(1)/"/>
    <id>http://kelunblog.com/2014/12/25/Learning-lo-dashjs(1)/</id>
    <published>2014-12-26T00:09:12.000Z</published>
    <updated>2014-12-25T11:30:03.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * Creates an array with all falsey values of `array` removed. The values</div><div class="line">   * `false`, `null`, `0`, `""`, `undefined` and `NaN` are all falsey.</div><div class="line">   *</div><div class="line">   * @static</div><div class="line">   * @memberOf _</div><div class="line">   * @category Arrays</div><div class="line">   * @param {Array} array The array to compact.</div><div class="line">   * @returns {Array} Returns a new filtered array.</div><div class="line">   * @example</div><div class="line">   *</div><div class="line">   * _.compact([0, 1, false, 2, '', 3]);</div><div class="line">   * // =&gt; [1, 2, 3]</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">compact</span><span class="params">(array)</span> </span>{</div><div class="line">    <span class="keyword">var</span> index = -<span class="number">1</span>,</div><div class="line">        length = array ? array.length : <span class="number">0</span>,</div><div class="line">        result = [];</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (++index &lt; length) {</div><div class="line">      <span class="keyword">var</span> value = array[index];</div><div class="line">      <span class="keyword">if</span> (value) {</div><div class="line">        result.push(value);</div><div class="line">      }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  }</div></pre></td></tr></table></figure>



<ol>
<li>First we need to know if the input is an array. The code below </li>
</ol>
<figure class="highlight length"><figcaption><span>= array ? array.length : 0``` detect if the input is not an array, than the length is set to 0 or undefined.</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="number">2.</span> <span class="keyword">If</span> the input <span class="keyword">is</span> <span class="keyword">not</span> an <span class="keyword">array</span> <span class="keyword">or</span> <span class="keyword">is</span> an empty <span class="keyword">array</span>, this <span class="keyword">function</span> will <span class="keyword">return</span> an empty <span class="keyword">array</span>.</div><div class="line"></div><div class="line"><span class="number">3.</span> <span class="keyword">If</span> the input <span class="keyword">is</span> an unempty <span class="keyword">array</span>, than iterate the <span class="keyword">array</span> <span class="keyword">and</span> <span class="keyword">use</span> this code</div></pre></td></tr></table></figure>

<p>if (value){result.push(value);}<code>`` to put all unfalsey value into an empty array.</code>false<code>,</code>null<code>,</code>0<code>,</code>“”<code>,</code>undefined<code>and</code>NaN` are all falsey.</p>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[Understanding Sockets]]></title>
    <link href="http://kelunblog.com/2014/11/19/Understanding-Sockets/"/>
    <id>http://kelunblog.com/2014/11/19/Understanding-Sockets/</id>
    <published>2014-11-19T15:12:34.000Z</published>
    <updated>2014-11-19T15:13:25.000Z</updated>
    <content type="html"><![CDATA[<p>Understanding Sockets</p>
<ol>
<li><p>The client server model</p>
<ul>
<li>The steps involved in establishing a socket on the client side are as follows:<ol>
<li>Create a socket with the socket() system call</li>
<li>Connect the socket to the address of the server using the connect() system call</li>
<li>Send and receive data. There are a number of ways to do this, but the simplest is to use the read() and write() system calls.        </li>
</ol>
</li>
<li>The steps involved in establishing a socket on the server side are as follows:<ol>
<li>Create a socket with the socket() system call</li>
<li>Bind the socket to an address using the bind() system call. For a server socket on the Internet, an address consists of a port number on the host machine.</li>
<li>Listen for connections with the listen() system call</li>
<li>Accept a connection with the accept() system call. This call typically blocks until a client connects with the server.</li>
<li>Send and receive data</li>
</ol>
</li>
</ul>
</li>
<li><p>Socket types</p>
<p> When a socket is created, the program as to specify the address domain and the socket type.    </p>
<ul>
<li>Domain:<ol>
<li>unix domain（local file system）</li>
<li>Internet domain(IP + port number)</li>
</ol>
</li>
<li>Socket type:<ol>
<li>Stream sockets(TCP):Stream sockets treat communications as a continuous stream of characters</li>
<li>Datagram sockets(UDP):datagram sockets have to read entire messages at once</li>
</ol>
</li>
</ul>
</li>
<li><p>Best tutorial for sockets</p>
<ul>
<li><a href="http://www.linuxhowtos.org/C_C++/socket.htm" target="_blank" rel="external">http://www.linuxhowtos.org/C_C++/socket.htm</a>        </li>
</ul>
</li>
</ol>
]]></content>
    
    
      <category term="sockets" scheme="http://kelunblog.com/tags/sockets/"/>
    
      <category term="linux" scheme="http://kelunblog.com/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[What is base 64 encoding used for?]]></title>
    <link href="http://kelunblog.com/2014/11/12/What-is-base-64-encoding-used-for/"/>
    <id>http://kelunblog.com/2014/11/12/What-is-base-64-encoding-used-for/</id>
    <published>2014-11-12T20:38:50.000Z</published>
    <updated>2014-11-12T20:43:47.000Z</updated>
    <content type="html"><![CDATA[<p>When you have some binary data that you want to ship across a network, you generally don’t do it by just streaming the bits and bytes over the wire in a raw format. Why? because some media are made for streaming text. You never know — <strong>some protocols may interpret your binary data as control characters (like a modem), or your binary data could be screwed up because the underlying protocol might think that you’ve entered a special character combination (like how FTP translates line endings)</strong>.</p>
<p>So to get around this, people encode the binary data into characters. Base64 is one of these types of encodings. <strong>Why 64? Because you can generally rely on the same 64 characters being present in many character sets, and you can be reasonably confident that your data’s going to end up on the other side of the wire uncorrupted.</strong></p>
]]></content>
    
    
      <category term="base64" scheme="http://kelunblog.com/tags/base64/"/>
    
      <category term="basic" scheme="http://kelunblog.com/categories/basic/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript Style Guide]]></title>
    <link href="http://kelunblog.com/2014/10/23/JavaScript-Style-Guide/"/>
    <id>http://kelunblog.com/2014/10/23/JavaScript-Style-Guide/</id>
    <published>2014-10-23T20:15:32.000Z</published>
    <updated>2014-10-23T20:18:45.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Objects">Objects</h2>
<ul>
<li>Use the literal syntax for object creation.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> item = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> item = {};</div></pre></td></tr></table></figure>

<ul>
<li>Don’t use <a href="http://es5.github.io/#x7.6.1" target="_blank" rel="external">reserved words</a> as keys. It won’t work in IE8. <a href="https://github.com/airbnb/javascript/issues/61" target="_blank" rel="external">More info</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> superman = {</div><div class="line">  <span class="keyword">default</span>: { clark: <span class="string">'kent'</span> },</div><div class="line">  private: <span class="literal">true</span></div><div class="line">};</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> superman = {</div><div class="line">  defaults: { clark: <span class="string">'kent'</span> },</div><div class="line">  hidden: <span class="literal">true</span></div><div class="line">};</div></pre></td></tr></table></figure>

<ul>
<li>Use readable synonyms in place of reserved words.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> superman = {</div><div class="line">  <span class="keyword">class</span>: <span class="string">'alien'</span></div><div class="line">};</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> superman = {</div><div class="line">  klass: <span class="string">'alien'</span></div><div class="line">};</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> superman = {</div><div class="line">  type: <span class="string">'alien'</span></div><div class="line">};</div></pre></td></tr></table></figure>


<h2 id="Arrays">Arrays</h2>
<ul>
<li>Use the literal syntax for array creation</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> items = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> items = [];</div></pre></td></tr></table></figure>

<ul>
<li>If you don’t know array length use Array#push.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> someStack = [];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">someStack[someStack.length] = <span class="string">'abracadabra'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">someStack.push(<span class="string">'abracadabra'</span>);</div></pre></td></tr></table></figure>

<ul>
<li>When you need to copy an array use Array#slice. <a href="http://jsperf.com/converting-arguments-to-an-array/7" target="_blank" rel="external">jsPerf</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> len = items.length,</div><div class="line">    itemsCopy = [],</div><div class="line">    i;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) {</div><div class="line">  itemsCopy[i] = items[i];</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">itemsCopy = items.slice();</div></pre></td></tr></table></figure>

<ul>
<li>To convert an array-like object to an array, use Array#slice.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line">  ...</div><div class="line">}</div></pre></td></tr></table></figure>


<h2 id="Strings">Strings</h2>
<ul>
<li>Use single quotes <code>&#39;&#39;</code> for strings</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">"Bob Parr"</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">'Bob Parr'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> fullName = <span class="string">"Bob "</span> + <span class="keyword">this</span>.lastName;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> fullName = <span class="string">'Bob '</span> + <span class="keyword">this</span>.lastName;</div></pre></td></tr></table></figure>

<ul>
<li>Strings longer than 80 characters should be written across multiple lines using string concatenation.</li>
<li>Note: If overused, long strings with concatenation could impact performance. <a href="http://jsperf.com/ya-string-concat" target="_blank" rel="external">jsPerf</a> &amp; <a href="https://github.com/airbnb/javascript/issues/40" target="_blank" rel="external">Discussion</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that was thrown because \</span></div><div class="line">of Batman. When you stop to think about how Batman had anything to do \</div><div class="line">with this, you would get nowhere \</div><div class="line">fast.';</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that was thrown because '</span> +</div><div class="line">  <span class="string">'of Batman. When you stop to think about how Batman had anything to do '</span> +</div><div class="line">  <span class="string">'with this, you would get nowhere fast.'</span>;</div></pre></td></tr></table></figure>

<ul>
<li>When programmatically building up a string, use Array#join instead of string concatenation. Mostly for IE: <a href="http://jsperf.com/string-vs-array-concat/2" target="_blank" rel="external">jsPerf</a>. Document of join function: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join" target="_blank" rel="external">MDN</a>.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> items,</div><div class="line">    messages,</div><div class="line">    length,</div><div class="line">    i;</div><div class="line"></div><div class="line">messages = [{</div><div class="line">  state: <span class="string">'success'</span>,</div><div class="line">  message: <span class="string">'This one worked.'</span></div><div class="line">}, {</div><div class="line">  state: <span class="string">'success'</span>,</div><div class="line">  message: <span class="string">'This one worked as well.'</span></div><div class="line">}, {</div><div class="line">  state: <span class="string">'error'</span>,</div><div class="line">  message: <span class="string">'This one did not work.'</span></div><div class="line">}];</div><div class="line"></div><div class="line">length = messages.length;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inbox</span><span class="params">(messages)</span> </span>{</div><div class="line">  items = <span class="string">'&lt;ul&gt;'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++) {</div><div class="line">    items += <span class="string">'&lt;li&gt;'</span> + messages[i].message + <span class="string">'&lt;/li&gt;'</span>;</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="keyword">return</span> items + <span class="string">'&lt;/ul&gt;'</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inbox</span><span class="params">(messages)</span> </span>{</div><div class="line">  items = [];</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++) {</div><div class="line">    items[i] = messages[i].message;</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="string">'&lt;ul&gt;&lt;li&gt;'</span> + items.join(<span class="string">'&lt;/li&gt;&lt;li&gt;'</span>) + <span class="string">'&lt;/li&gt;&lt;/ul&gt;'</span>;</div><div class="line">}</div></pre></td></tr></table></figure>


<h2 id="Variables">Variables</h2>
<ul>
<li>Use one <code>var</code> declaration for multiple variables and declare each variable on a newline.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> items = getItems();</div><div class="line"><span class="keyword">var</span> goSportsTeam = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> dragonball = <span class="string">'z'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> items = getItems(),</div><div class="line">    goSportsTeam = <span class="literal">true</span>,</div><div class="line">    dragonball = <span class="string">'z'</span>;</div></pre></td></tr></table></figure>


<ul>
<li>Declare unassigned variables last. This is helpful when later on you might need to assign a variable depending on one of the previous assigned variables.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> i, len, dragonball,</div><div class="line">    items = getItems(),</div><div class="line">    goSportsTeam = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> i, items = getItems(),</div><div class="line">    dragonball,</div><div class="line">    goSportsTeam = <span class="literal">true</span>,</div><div class="line">    len;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> items = getItems(),</div><div class="line">    goSportsTeam = <span class="literal">true</span>,</div><div class="line">    dragonball,</div><div class="line">    length,</div><div class="line">    i;</div></pre></td></tr></table></figure>


<ul>
<li>Assign variables at the top of their scope. This helps avoid issues with variable declaration and assignment hoisting related issues.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  test();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'doing stuff..'</span>);</div><div class="line"></div><div class="line">  <span class="comment">//..other stuff..</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) {</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line"></div><div class="line">  test();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'doing stuff..'</span>);</div><div class="line"></div><div class="line">  <span class="comment">//..other stuff..</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) {</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!<span class="built_in">arguments</span>.length) {</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">if</span> (!<span class="built_in">arguments</span>.length) {</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">}</div></pre></td></tr></table></figure>


<h2 id="Comments">Comments</h2>
<ul>
<li>Use <code>/** ... */</code> for multiline comments. Include a description, specify types and values for all parameters and return values.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="comment">// make() returns a new element</span></div><div class="line"><span class="comment">// based on the passed in tag name</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @param &lt;String&gt; tag</span></div><div class="line"><span class="comment">// @return &lt;Element&gt; element</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">(tag)</span> </span>{</div><div class="line"></div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> element;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * make() returns a new element</div><div class="line"> * based on the passed in tag name</div><div class="line"> *</div><div class="line"> * @param &lt;String&gt; tag</div><div class="line"> * @return &lt;Element&gt; element</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">(tag)</span> </span>{</div><div class="line"></div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> element;</div><div class="line">}</div></pre></td></tr></table></figure>

<ul>
<li>Use <code>//</code> for single line comments. Place single line comments on a newline above the subject of the comment. Put an empty line before the comment.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> active = <span class="literal">true</span>;  <span class="comment">// is current tab</span></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="comment">// is current tab</span></div><div class="line"><span class="keyword">var</span> active = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span><span class="params">()</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</div><div class="line">  <span class="comment">// set the default type to 'no type'</span></div><div class="line">  <span class="keyword">var</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> type;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span><span class="params">()</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// set the default type to 'no type'</span></div><div class="line">  <span class="keyword">var</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> type;</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="Whitespace">Whitespace</h2>
<ul>
<li>Use indentation when making long method chains.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="string">'#items'</span>).find(<span class="string">'.selected'</span>).highlight().end().find(<span class="string">'.open'</span>).updateCount();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="string">'#items'</span>)</div><div class="line">  .find(<span class="string">'.selected'</span>)</div><div class="line">    .highlight()</div><div class="line">    .end()</div><div class="line">  .find(<span class="string">'.open'</span>)</div><div class="line">    .updateCount();</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> leds = stage.selectAll(<span class="string">'.led'</span>).data(data).enter().append(<span class="string">'svg:svg'</span>).class(<span class="string">'led'</span>, <span class="literal">true</span>)</div><div class="line">    .attr(<span class="string">'width'</span>,  (radius + margin) * <span class="number">2</span>).append(<span class="string">'svg:g'</span>)</div><div class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</div><div class="line">    .call(tron.led);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> leds = stage.selectAll(<span class="string">'.led'</span>)</div><div class="line">    .data(data)</div><div class="line">  .enter().append(<span class="string">'svg:svg'</span>)</div><div class="line">    .class(<span class="string">'led'</span>, <span class="literal">true</span>)</div><div class="line">    .attr(<span class="string">'width'</span>,  (radius + margin) * <span class="number">2</span>)</div><div class="line">  .append(<span class="string">'svg:g'</span>)</div><div class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</div><div class="line">    .call(tron.led);</div></pre></td></tr></table></figure>

<h2 id="Type_Casting_&amp;_Coercion">Type Casting &amp; Coercion</h2>
<ul>
<li>Perform type coercion at the beginning of the statement.</li>
<li>Strings:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  =&gt; this.reviewScore = 9;</span></div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">''</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="string">''</span> + <span class="keyword">this</span>.reviewScore;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="string">''</span> + <span class="keyword">this</span>.reviewScore + <span class="string">' total score'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">' total score'</span>;</div></pre></td></tr></table></figure>

<ul>
<li>Use <code>parseInt</code> for Numbers and always with a radix for type casting.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> inputValue = <span class="string">'4'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = <span class="keyword">new</span> <span class="built_in">Number</span>(inputValue);</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = +inputValue;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = inputValue &gt;&gt; <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = <span class="built_in">parseInt</span>(inputValue);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> val = <span class="built_in">Number</span>(inputValue);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> val = <span class="built_in">parseInt</span>(inputValue, <span class="number">10</span>);</div></pre></td></tr></table></figure>

<ul>
<li>If for whatever reason you are doing something wild and <code>parseInt</code> is your bottleneck and need to use Bitshift for <a href="http://jsperf.com/coercion-vs-casting/3" target="_blank" rel="external">performance reasons</a>, leave a comment explaining why and what you’re doing.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * parseInt was the reason my code was slow.</div><div class="line"> * Bitshifting the String to coerce it to a</div><div class="line"> * Number made it a lot faster.</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> val = inputValue &gt;&gt; <span class="number">0</span>;</div></pre></td></tr></table></figure>

<ul>
<li><strong>Note:</strong> Be careful when using bitshift operations. Numbers are represented as <a href="http://es5.github.io/#x4.3.19" target="_blank" rel="external">64-bit values</a>, but Bitshift operations always return a 32-bit integer (<a href="http://es5.github.io/#x11.7" target="_blank" rel="external">source</a>). Bitshift can lead to unexpected behavior for integer values larger than 32 bits. <a href="https://github.com/airbnb/javascript/issues/109" target="_blank" rel="external">Discussion</a>. Largest signed 32-bit Int is 2,147,483,647:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">2147483647</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; 2147483647</span></div><div class="line"><span class="number">2147483648</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483648</span></div><div class="line"><span class="number">2147483649</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483647</span></div></pre></td></tr></table></figure>

<h2 id="Naming_Conventions">Naming Conventions</h2>
<ul>
<li>Avoid single letter names. Be descriptive with your naming.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">q</span><span class="params">()</span> </span>{</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">()</span> </span>{</div><div class="line">  <span class="comment">// ..stuff..</span></div><div class="line">}</div></pre></td></tr></table></figure>

<ul>
<li>Use camelCase when naming objects, functions, and instances</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> OBJEcttsssss = {};</div><div class="line"><span class="keyword">var</span> this_is_my_object = {};</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span><span class="params">()</span> </span>{}</div><div class="line"><span class="keyword">var</span> u = <span class="keyword">new</span> user({</div><div class="line">  name: <span class="string">'Bob Parr'</span></div><div class="line">});</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> thisIsMyObject = {};</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">thisIsMyFunction</span><span class="params">()</span> </span>{}</div><div class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User({</div><div class="line">  name: <span class="string">'Bob Parr'</span></div><div class="line">});</div></pre></td></tr></table></figure>

<ul>
<li>Use PascalCase when naming constructors or classes</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span><span class="params">(options)</span> </span>{</div><div class="line">  <span class="keyword">this</span>.name = options.name;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">var</span> bad = <span class="keyword">new</span> user({</div><div class="line">  name: <span class="string">'nope'</span></div><div class="line">});</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span><span class="params">(options)</span> </span>{</div><div class="line">  <span class="keyword">this</span>.name = options.name;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">var</span> good = <span class="keyword">new</span> User({</div><div class="line">  name: <span class="string">'yup'</span></div><div class="line">});</div></pre></td></tr></table></figure>

<ul>
<li>Use a leading underscore <code>_</code> when naming private properties</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">this</span>.__firstName__ = <span class="string">'Panda'</span>;</div><div class="line"><span class="keyword">this</span>.firstName_ = <span class="string">'Panda'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">this</span>._firstName = <span class="string">'Panda'</span>;</div></pre></td></tr></table></figure>

<ul>
<li>When saving a reference to <code>this</code> use <code>_this</code>.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(self);</div><div class="line">  };</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(that);</div><div class="line">  };</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(_this);</div><div class="line">  };</div><div class="line">}</div></pre></td></tr></table></figure>

<ul>
<li>Name your functions. This is helpful for stack traces.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span><span class="params">(msg)</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log(msg);</div><div class="line">};</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">(msg)</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log(msg);</div><div class="line">};</div></pre></td></tr></table></figure>

<h2 id="Constructors">Constructors</h2>
<ul>
<li>Assign methods to the prototype object, instead of overwriting the prototype with a new object. Overwriting the prototype makes inheritance impossible: by resetting the prototype you’ll overwrite the base!</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span><span class="params">()</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'new jedi'</span>);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">Jedi.prototype = {</div><div class="line">  fight: <span class="function"><span class="keyword">function</span> <span class="title">fight</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'fighting'</span>);</div><div class="line">  },</div><div class="line"></div><div class="line">  block: <span class="function"><span class="keyword">function</span> <span class="title">block</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'blocking'</span>);</div><div class="line">  }</div><div class="line">};</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">Jedi.prototype.fight = <span class="function"><span class="keyword">function</span> <span class="title">fight</span><span class="params">()</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fighting'</span>);</div><div class="line">};</div><div class="line"></div><div class="line">Jedi.prototype.block = <span class="function"><span class="keyword">function</span> <span class="title">block</span><span class="params">()</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'blocking'</span>);</div><div class="line">};</div></pre></td></tr></table></figure>

<ul>
<li>Methods can return <code>this</code> to help with method chaining.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">};</div><div class="line"></div><div class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span><span class="params">(height)</span> </span>{</div><div class="line">  <span class="keyword">this</span>.height = height;</div><div class="line">};</div><div class="line"></div><div class="line"><span class="keyword">var</span> luke = <span class="keyword">new</span> Jedi();</div><div class="line">luke.jump(); <span class="comment">// =&gt; true</span></div><div class="line">luke.setHeight(<span class="number">20</span>) <span class="comment">// =&gt; undefined</span></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">};</div><div class="line"></div><div class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span><span class="params">(height)</span> </span>{</div><div class="line">  <span class="keyword">this</span>.height = height;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">};</div><div class="line"></div><div class="line"><span class="keyword">var</span> luke = <span class="keyword">new</span> Jedi();</div><div class="line"></div><div class="line">luke.jump()</div><div class="line">  .setHeight(<span class="number">20</span>);</div></pre></td></tr></table></figure>

<ul>
<li>It’s okay to write a custom toString() method, just make sure it works successfully and causes no side effects.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span><span class="params">(options)</span> </span>{</div><div class="line">  options || (options = {});</div><div class="line">  <span class="keyword">this</span>.name = options.name || <span class="string">'no name'</span>;</div><div class="line">}</div><div class="line"></div><div class="line">Jedi.prototype.getName = <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">};</div><div class="line"></div><div class="line">Jedi.prototype.toString = <span class="function"><span class="keyword">function</span> <span class="title">toString</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="string">'Jedi - '</span> + <span class="keyword">this</span>.getName();</div><div class="line">};</div></pre></td></tr></table></figure>

<h2 id="Events">Events</h2>
<ul>
<li>When attaching data payloads to events (whether DOM events or something more proprietary like Backbone events), pass a hash instead of a raw value. This allows a subsequent contributor to add more data to the event payload without finding and updating every handler for the event. For example, instead of:</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, listing.id);</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e, listingId)</span> </span>{</div><div class="line">  <span class="comment">// do something with listingId</span></div><div class="line">});</div></pre></td></tr></table></figure>

<pre><code><span class="label">prefer:</span>
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, { listingId : listing.id });</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e, data)</span> </span>{</div><div class="line">  <span class="comment">// do something with data.listingId</span></div><div class="line">});</div></pre></td></tr></table></figure>

<h2 id="jQuery">jQuery</h2>
<ul>
<li>Prefix jQuery object variables with a <code>$</code>.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> sidebar = $(<span class="string">'.sidebar'</span>);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> $sidebar = $(<span class="string">'.sidebar'</span>);</div></pre></td></tr></table></figure>

<ul>
<li>Cache jQuery lookups.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span><span class="params">()</span> </span>{</div><div class="line">  $(<span class="string">'.sidebar'</span>).hide();</div><div class="line"></div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line"></div><div class="line">  $(<span class="string">'.sidebar'</span>).css({</div><div class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></div><div class="line">  });</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> $sidebar = $(<span class="string">'.sidebar'</span>);</div><div class="line">  $sidebar.hide();</div><div class="line"></div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line"></div><div class="line">  $sidebar.css({</div><div class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></div><div class="line">  });</div><div class="line">}</div></pre></td></tr></table></figure>

<ul>
<li>For DOM queries use Cascading <code>$(&#39;.sidebar ul&#39;)</code> or parent &gt; child <code>$(&#39;.sidebar &gt; ul&#39;)</code>. <a href="http://jsperf.com/jquery-find-vs-context-sel/16" target="_blank" rel="external">jsPerf</a></li>
<li><p>Use <code>find</code> with scoped jQuery object queries.</p>
<p>```javascript<br>// bad<br>$(‘ul’, ‘.sidebar’).hide();</p>
<p>// bad<br>$(‘.sidebar’).find(‘ul’).hide();</p>
<p>// good<br>$(‘.sidebar ul’).hide();</p>
<p>// good<br>$(‘.sidebar &gt; ul’).hide();</p>
<p>// good<br>$sidebar.find(‘ul’).hide();</p>
</li>
</ul>
]]></content>
    
    
      <category term="javascript style" scheme="http://kelunblog.com/tags/javascript-style/"/>
    
      <category term="javascript" scheme="http://kelunblog.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Intro to Node.js]]></title>
    <link href="http://kelunblog.com/2014/09/26/Intro-to-Nodejs/"/>
    <id>http://kelunblog.com/2014/09/26/Intro-to-Nodejs/</id>
    <published>2014-09-27T03:56:13.000Z</published>
    <updated>2014-10-14T01:11:24.000Z</updated>
    <content type="html"><![CDATA[<h2 id="1-_process">1. process</h2>
<p>The process object is a global object and can be accessed from anywhere.</p>
<ul>
<li><p><strong>process.argv</strong>: An array containing the command line arguments. The first element will be ‘node’, the second element will be the name of the JavaScript file. The next elements will be any additional command line arguments.`</p>
<pre><code>  // <span class="keyword">print</span> process.<span class="built_in">argv</span>
  process.<span class="built_in">argv</span>.forEach(<span class="function"><span class="keyword">function</span><span class="params">(val, index, array)</span> {</span>
    console.<span class="built_in">log</span>(<span class="built_in">index</span> + <span class="string">': '</span> + val);
  });
</code></pre><p>This will generate:</p>
<pre><code>  $ node <span class="built_in">process</span>-<span class="number">2.</span>js <span class="constant">one</span> <span class="constant">two</span>=<span class="constant">three</span> <span class="constant">four</span>
  <span class="number">0</span>: node
  <span class="number">1</span>: /Users/mjr/work/node/<span class="built_in">process</span>-<span class="number">2.</span>js
  <span class="number">2</span>: <span class="constant">one</span>
  <span class="number">3</span>: <span class="constant">two</span>=<span class="constant">three</span>
  <span class="number">4</span>: <span class="constant">four</span>
</code></pre></li>
</ul>
<h2 id="2-_I/O">2. I/O</h2>
<ul>
<li><p>Synchronous I/O opertion: To perform a filesystem operation we need to use fs module from the Node core library. To load this kind of module, or any other “global” module, use the following incantation:</p>
<pre><code>  <span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)
</code></pre><p>Now you have the full fs module available in a variable named fs.<br>All synchronous (or blocking) filesystem methods in the fs module end with ‘Sync’. To read a file, you’ll need to use </p>
<pre><code>  fs.readFileSync('/path/<span class="keyword">to</span>/<span class="keyword">file</span>') 
</code></pre><p>This method will return a Buffer object containing the complete contents of the file.<br>Buffer objects are Node’s way of efficiently representing arbitrary arrays of data, whether it be ascii, binary or some other format. Buffer objects can be converted to strings by simply calling the toString() method on them. e.g. </p>
<pre><code>  <span class="keyword">var</span> str = buf.<span class="built_in">toString</span>().
</code></pre><p>An example of basic sync I\O operation: read a file and count the lines:</p>
<pre><code>  <span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);

  <span class="keyword">var</span> buffer = fs.readFileSync(process.argv[<span class="number">2</span>]);
  <span class="keyword">var</span> str = buffer.toString();
  <span class="keyword">var</span> arr = str.split(<span class="string">'\n'</span>);

  <span class="built_in">console</span>.log(arr.length - <span class="number">1</span>);        
</code></pre></li>
</ul>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[Javascript tricks]]></title>
    <link href="http://kelunblog.com/2014/09/18/Javascript-tricks/"/>
    <id>http://kelunblog.com/2014/09/18/Javascript-tricks/</id>
    <published>2014-09-18T22:52:06.000Z</published>
    <updated>2014-09-18T22:54:48.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Some_basic_javascript_tricks">Some basic javascript tricks</h1>
<ol>
<li>Based on your brower you can use:          </li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.documentElement</div></pre></td></tr></table></figure>


<pre><code><span class="built_in">or</span>
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.body</div></pre></td></tr></table></figure>

<pre><code><span class="built_in">to</span> select <span class="operator">the</span> body <span class="operator">or</span> html <span class="keyword">element</span>. You can also <span class="built_in">write</span> code like this: 
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> root = <span class="regexp">/firefox|tridenti.test(navigator.userAgent) ? document.documentElement : document.body</span></div></pre></td></tr></table></figure>


<ol>
<li>Gets or sets the number of pixels that the content of an element is scrolled upward.</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root.scrollTop;</div></pre></td></tr></table></figure>


<ol>
<li>Get text rectangle object    </li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rectObject = object.getBoundingClientRect();</div></pre></td></tr></table></figure>


<ol>
<li>Get full height of the browser and get the height of the viewpoint.</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root.scrollHeight; <span class="comment">//full height of browser</span></div><div class="line"><span class="built_in">window</span>.innerHeight; <span class="comment">//The height of the view point</span></div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="javascript" scheme="http://kelunblog.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Some basic notes about php & mysql]]></title>
    <link href="http://kelunblog.com/2014/09/07/Some-basic-notes-about-php-&-mysql/"/>
    <id>http://kelunblog.com/2014/09/07/Some-basic-notes-about-php-&-mysql/</id>
    <published>2014-09-08T01:32:43.000Z</published>
    <updated>2014-09-15T21:42:29.000Z</updated>
    <content type="html"><![CDATA[<h1 id="apache:">apache:</h1>
<pre><code><span class="built_in">sudo</span> apachectl start
<span class="built_in">sudo</span> apachectl stop
<span class="built_in">sudo</span> apachectl restart
</code></pre><h1 id="php:">php:</h1>
<ol>
<li><p>urlencode($varable) vs rawurlencode</p>
<ul>
<li>rawurlencode the path:<ul>
<li>Path is the part before the “?”</li>
<li>Spaces must be encoded as %20        </li>
</ul>
</li>
<li>url encode the query string<ul>
<li>Query string is the part after the “?”        + space are better encoded as “+”</li>
</ul>
</li>
</ul>
</li>
<li><p>htmlspecialchars(), htmlentities()</p>
<ul>
<li>Reserved words in html: “&lt;”, “&gt;”, “&amp;”, “</li>
<li>use htmlspecialchars() to render this reserved words.</li>
<li>render some special characters use htmlentities()</li>
</ul>
</li>
<li><p>include(), require()    [when error, halt the execution]</p>
</li>
<li>header($string) 必须写在html之前    <ul>
<li>header(“Location: login.php”); //used as redirect to new page.</li>
</ul>
</li>
</ol>
<figure class="highlight <?php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">header(<span class="string">"Location: basic.html"</span>);</div><div class="line"><span class="keyword">exit</span>; <span class="comment">//Prevent render html files</span></div><div class="line">   <span class="preprocessor">?&gt;</span></div></pre></td></tr></table></figure>



<h1 id="Mysql">Mysql</h1>
<ol>
<li><p>basic command:</p>
<ul>
<li><p>login:</p>
<pre><code>  <span class="title">mysql</span> -u root -p
</code></pre></li>
<li><p>Show database:</p>
<pre><code>  <span class="operator"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>;</span>            
</code></pre></li>
<li><p>Creat database:</p>
<pre><code>  <span class="operator"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> &lt;name&gt;;</span>
</code></pre></li>
<li><p>Use database:</p>
<pre><code>  USE <span class="tag">&lt;<span class="title">name</span>&gt;</span>
</code></pre></li>
<li><p>Drop database:</p>
<pre><code>  <span class="operator"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> &lt;name&gt;    </span>
</code></pre></li>
<li><p>Creat new dabase user </p>
<pre><code>  <span class="operator"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> db_name.*
  <span class="keyword">TO</span> <span class="string">'username'</span>@<span class="string">'localhost'</span>
  <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'password'</span>;</span>

  <span class="operator"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> <span class="string">'username'</span>@<span class="string">'localhost'</span>;</span>
</code></pre></li>
<li><p>TABLE:</p>
<ul>
<li>subject:<ul>
<li>id</li>
<li>menu_name</li>
<li>position</li>
<li>visible</li>
</ul>
</li>
</ul>
</li>
<li><p>SHOW tables:</p>
<pre><code>  <span class="operator"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span>;</span>
</code></pre></li>
<li><p>Show database schema:</p>
<pre><code>  <span class="operator"><span class="keyword">SHOW</span> <span class="keyword">COLUMNS</span> <span class="keyword">FROM</span> &lt;<span class="keyword">table</span> name&gt;            </span>
</code></pre></li>
<li><p>Creat tables:</p>
<pre><code>  <span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> subjects (   id <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,    menu_name <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,   <span class="keyword">position</span> <span class="built_in">INT</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, visible TINYINT(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,   <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>(id));</span>
</code></pre></li>
<li><p>Show columns:</p>
<p>  SHOW COLUMNS FROM table_name;</p>
</li>
<li><p>crud</p>
<ul>
<li><p>Creat: SQL INSERT</p>
<pre><code>  <span class="operator"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> (column1, column2, column3)
  <span class="keyword">VALUES</span> (val1, val2 ,val3);</span>
</code></pre></li>
<li><p>Read:SQL SELECT</p>
<pre><code>  <span class="operator"><span class="keyword">SELECT</span> *
  <span class="keyword">FROM</span> <span class="keyword">table</span>
  <span class="keyword">WHERE</span> column1 = <span class="string">'some text'</span>
  <span class="keyword">ORDER</span> <span class="keyword">BY</span> column1 <span class="keyword">ASC</span>;</span>
</code></pre></li>
<li><p>Update</p>
<pre><code>  <span class="operator"><span class="keyword">UPDATE</span> <span class="keyword">table</span>
  <span class="keyword">SET</span> column1 = <span class="string">'some_text'</span>
  <span class="keyword">WHERE</span> id = <span class="number">1</span>;</span>
</code></pre></li>
<li><p>Delete    </p>
<pre><code>  <span class="operator"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">table</span>
  <span class="keyword">WHERE</span> id = <span class="number">1</span>;</span>      
</code></pre></li>
</ul>
</li>
</ul>
</li>
</ol>
<h1 id="PHP_&amp;_Mysql">PHP &amp; Mysql</h1>
<ol>
<li><p>Creat database connection</p>
<pre><code> <span class="variable">$dbhost</span> = <span class="string">"127.0.0.1"</span>;
 <span class="variable">$dbuser</span> = <span class="string">"widght_cms"</span>;
 <span class="variable">$dbpass</span> = <span class="string">"chuangfu1314"</span>;
 <span class="variable">$dbname</span> = <span class="string">"widget_corp"</span>;
 <span class="variable">$connection</span> = mysqli_connect(<span class="variable">$dbhost</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>, <span class="variable">$dbname</span>);    
 <span class="keyword">if</span>(mysqli_connect_errno()) {
 <span class="keyword">die</span>(<span class="string">"Database connection faild: "</span> . 
     mysqli_connect_error() . 
     <span class="string">" ("</span> . mysqli_connect_errno() . <span class="string">")"</span>);
 }
</code></pre></li>
<li><p>database query</p>
<ul>
<li><p>Read data:</p>
<pre><code>  $query = <span class="string">"SELECT * FROM subjects"</span>;
  $<span class="literal">result</span> = mysqli_query($connection, $query);
  <span class="keyword">if</span>(!$<span class="literal">result</span>) {
      die(<span class="string">"database query failed."</span>);
  }
</code></pre></li>
<li><p>Creat data(return true or false):                                </p>
<pre><code>  $query = <span class="string">"INSERT INTO subjects ( mean_name, position, visible) VALUES ({$menu_name},{$position},{$visible})"</span>
  $<span class="literal">result</span> = mysqli_query($connection, $query);
</code></pre></li>
</ul>
</li>
<li><p>Use returned data</p>
<pre><code> <span class="keyword">while</span>($row = mysqli_fetch_assoc($<span class="literal">result</span>)) {
     var_dump($row);
     echo <span class="string">"&lt;hr /&gt;"</span>;
 }
</code></pre></li>
<li><p>Release returned data</p>
<pre><code> mysqli_free_result($<span class="literal">result</span>);
</code></pre></li>
<li><p>close database</p>
<pre><code> <span class="function">mysqli_close</span>(<span class="variable">$connection</span>);        
</code></pre></li>
</ol>
<h1 id="Interview_questions">Interview questions</h1>
<ol>
<li><p>How the result set of Mysql be handled in PHP?</p>
<p> The result set can be handled using mysql_fetch_array, mysql_fetch_assoc, mysql_fetch_object or mysql_fetch_row.</p>
</li>
<li><p>How is it possible to know the number of rows returned in result set?</p>
<p> The function mysql_num_rows() returns the number of rows in a result set.</p>
</li>
<li><p>What is the difference between     mysql_fetch_object() and mysql_fetch_array()?</p>
<p> The mysql_fetch_object() function collects the first single matching record where mysql_fetch_array() collects all matching records from the table in an array.</p>
</li>
<li><p>How a constant is defined in a PHP script?</p>
<p> The define() directive lets us defining a constant as follows:</p>
<pre><code> <span class="class"><span class="keyword">define</span> </span>(“ACONSTANT”, <span class="number">123</span>);    
</code></pre></li>
<li><p>How can you pass a variable by reference?</p>
<p> To be able to pass a variable by reference, we use an ampersand in front of it, as follows $var1 = &amp;$var2    </p>
</li>
<li><p>Will a comparison of an integer 12 and a string “13″ work in PHP?</p>
<p> “13″ and 12 can be compared in PHP since it casts everything to the integer type.    </p>
</li>
<li><p>What does $GLOBALS means?</p>
<p> $GLOBALS is associative array including references to all variables which are currently defined in the global scope of the script.                    </p>
</li>
</ol>
]]></content>
    
    
      <category term="PHP" scheme="http://kelunblog.com/tags/PHP/"/>
    
      <category term="Mysql" scheme="http://kelunblog.com/tags/Mysql/"/>
    
      <category term="apache" scheme="http://kelunblog.com/tags/apache/"/>
    
      <category term="LAMP" scheme="http://kelunblog.com/categories/LAMP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[My notes about penetration testing]]></title>
    <link href="http://kelunblog.com/2014/08/31/My-nodetes-about-penetration-testing/"/>
    <id>http://kelunblog.com/2014/08/31/My-nodetes-about-penetration-testing/</id>
    <published>2014-08-31T21:08:48.000Z</published>
    <updated>2014-10-21T15:38:25.000Z</updated>
    <content type="html"><![CDATA[<h1 id="1-Reconnaissance">1.Reconnaissance</h1>
<ol>
<li><p><strong>Website copier</strong>: HTTrack is a free utility that creates an identical, offline copy of the target website. The copied website will include all the pages, links, pictures, and code from the original website; however, it will reside on your local computer. Utilizing a website-copying tool like HTTrack allows us to explore and thor- oughly mine the website “offline” without having to spend additional time traipsing around on the company’s web server.<br>How to install : <code>apt-get install httrack</code> <code>httrack</code></p>
</li>
<li><p><strong>Google hacking</strong>: </p>
<ul>
<li>Serch in specified website:<code>site:domain term to search</code></li>
<li>Search key words in title: <code>allintitle:</code> <code>intitle:</code></li>
<li>Search for sites that contain specific words in the URL: <code>inurl:</code></li>
<li>Search website in cache:<code>cache:</code></li>
<li>Search for certain filetype like .doc, xlsx, ppt, txt:<code>filetype:pdf</code></li>
<li>Combine multiple directives into the same search:<code>site:dsu.edu filetype:pptx</code></li>
</ul>
</li>
<li><p><strong>The harvester</strong>: This tool allows us to quickly and accurately catalog both e-mail<br>addresses and subdomains that are directly related to our target.<code>theharvester -d &lt;domain&gt; -b google</code></p>
</li>
<li><p><strong>whois</strong>: The Whois service allows us to access specific information about our target including the IP addresses or host names of the company’s Domain Name Systems (DNS) servers and contact information which usually contains an address and a phone number.<code>whois target_domain</code></p>
</li>
<li><p><strong>host</strong>: Oftentimes, our reconnaissance efforts will result in host names rather than IP addresses. When this occurs, we can use the “host” tool to perform a translation for us. <code>host target_hostname</code> <code>host ip_adress</code>   </p>
</li>
<li><p><strong>Extracting information from DNS</strong></p>
<ul>
<li>nslookup: nslookup is a tool that can be used to query DNS servers and potentially obtain records about the various hosts of which it is aware.</li>
<li>dig: </li>
</ul>
</li>
</ol>
]]></content>
    
    
      <category term="Kali" scheme="http://kelunblog.com/tags/Kali/"/>
    
      <category term="penetration testing" scheme="http://kelunblog.com/tags/penetration-testing/"/>
    
      <category term="Hacking" scheme="http://kelunblog.com/categories/Hacking/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Some notes about Kali linux]]></title>
    <link href="http://kelunblog.com/2014/08/30/Some-notes-about-Kali-linux/"/>
    <id>http://kelunblog.com/2014/08/30/Some-notes-about-Kali-linux/</id>
    <published>2014-08-31T02:05:00.000Z</published>
    <updated>2014-08-31T21:09:53.000Z</updated>
    <content type="html"><![CDATA[<h1 id="1-_Some_basic_linux_commands">1. Some basic linux commands</h1>
<ul>
<li>List all the available interfaces for your machine: <code>ifconfig -a</code></li>
<li>Turn up (on) the desired network interface: <code>ifconfig eth0 up 192.168.1.23</code></li>
<li>Assign an IP address through DHCP:<code>dhclient</code></li>
<li>Reboot the machine using the command line interface: <code>reboot</code></li>
<li>Poweroff the machine using the command line interface: <code>poweroff</code></li>
</ul>
]]></content>
    
    
      <category term="kali" scheme="http://kelunblog.com/tags/kali/"/>
    
      <category term="linux" scheme="http://kelunblog.com/tags/linux/"/>
    
      <category term="penetration testing" scheme="http://kelunblog.com/tags/penetration-testing/"/>
    
      <category term="Hacking" scheme="http://kelunblog.com/categories/Hacking/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Everything about javascript function(8) - Function length]]></title>
    <link href="http://kelunblog.com/2014/08/28/Everything-about-javascript-function(8)---Function-length/"/>
    <id>http://kelunblog.com/2014/08/28/Everything-about-javascript-function(8)---Function-length/</id>
    <published>2014-08-28T21:42:11.000Z</published>
    <updated>2014-08-30T02:05:32.000Z</updated>
    <content type="html"><![CDATA[<h1 id="1-_How_does_a_function’s_length_property_work?">1. How does a function’s length property work?</h1>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">makeNinja</span><span class="params">(name)</span></span>{}             
<span class="function"><span class="keyword">function</span> <span class="title">makeSamurai</span><span class="params">(name, rank)</span></span>{} 
<span class="built_in">console</span>.log(makeNinja.length) <span class="comment">//1</span>
<span class="built_in">console</span>.log(makeSamurai.length) <span class="comment">//2</span>
</code></pre><h1 id="2-_Use_it_to_implement_method_overloading-">2. Use it to implement method overloading.</h1>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">addMethod</span><span class="params">(object, name, fn)</span></span>{
    <span class="comment">// Save a reference to the old method</span>
    <span class="keyword">var</span> old = object[ name ];

    <span class="comment">// Overwrite the method with our new one</span>
    object[ name ] = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
        <span class="comment">// Check the number of incoming arguments,</span>
        <span class="comment">// compared to our overloaded function</span>
        <span class="keyword">if</span> ( fn.length == <span class="built_in">arguments</span>.length )
        <span class="comment">// If there was a match, run the function</span>
            <span class="keyword">return</span> fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> );

        <span class="comment">// Otherwise, fallback to the old method</span>
        <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="keyword">typeof</span> old === <span class="string">"function"</span> )
            <span class="keyword">return</span> old.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> );
    };
}

<span class="function"><span class="keyword">function</span> <span class="title">Ninjas</span><span class="params">()</span></span>{
    <span class="keyword">var</span> ninjas = [ <span class="string">"Dean Edwards"</span>, <span class="string">"Sam Stephenson"</span>, <span class="string">"Alex Russell"</span> ];
    addMethod(<span class="keyword">this</span>, <span class="string">"find"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
        <span class="keyword">return</span> ninjas;
    });
    addMethod(<span class="keyword">this</span>, <span class="string">"find"</span>, <span class="function"><span class="keyword">function</span><span class="params">(name)</span></span>{
        <span class="keyword">var</span> ret = [];
        <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ninjas.length; i++ )
            <span class="keyword">if</span> ( ninjas[i].indexOf(name) == <span class="number">0</span> )
                ret.push( ninjas[i] );
        <span class="keyword">return</span> ret;
    });
    addMethod(<span class="keyword">this</span>, <span class="string">"find"</span>, <span class="function"><span class="keyword">function</span><span class="params">(first, last)</span></span>{
        <span class="keyword">var</span> ret = [];
        <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ninjas.length; i++ )
            <span class="keyword">if</span> ( ninjas[i] == (first + <span class="string">" "</span> + last) )
                ret.push( ninjas[i] );
        <span class="keyword">return</span> ret;
    });
}

<span class="keyword">var</span> ninjas = <span class="keyword">new</span> Ninjas();
<span class="built_in">console</span>.log( ninjas.find().length == <span class="number">3</span>); <span class="comment">//true. Finds all ninjas</span>
<span class="built_in">console</span>.log( ninjas.find(<span class="string">"Sam"</span>).length == <span class="number">1</span>); <span class="comment">//true. Finds ninjas by first name</span>
<span class="built_in">console</span>.log( ninjas.find(<span class="string">"Dean"</span>, <span class="string">"Edwards"</span>).length == <span class="number">1</span>); <span class="comment">//true.Finds ninjas by first and last name</span>
<span class="built_in">console</span>.log( ninjas.find(<span class="string">"Alex"</span>, <span class="string">"X"</span>, <span class="string">"Russell"</span>) == <span class="literal">null</span>); <span class="comment">//true. Does nothing    </span>
</code></pre>]]></content>
    
    
      <category term="javascript" scheme="http://kelunblog.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Everything about Javascript function(7) - Inheritance]]></title>
    <link href="http://kelunblog.com/2014/08/26/Everything-about-Javascript-function(7)---Inheritance/"/>
    <id>http://kelunblog.com/2014/08/26/Everything-about-Javascript-function(7)---Inheritance/</id>
    <published>2014-08-27T02:19:21.000Z</published>
    <updated>2014-08-28T21:34:15.000Z</updated>
    <content type="html"><![CDATA[<h1 id="1-_How_prototype_inheritance_works?">1. How prototype inheritance works?</h1>
<p>We usually write constanted varibal in function, write object function use prototype.</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">()</span> </span>{
    <span class="keyword">this</span>.name = <span class="number">24</span>;
}
Person.prototype.dance = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{};

<span class="function"><span class="keyword">function</span> <span class="title">Ninja</span><span class="params">()</span> </span>{}
Ninja.prototype = <span class="keyword">new</span> Person();

<span class="keyword">var</span> ninja = <span class="keyword">new</span> Ninja();
<span class="built_in">console</span>.log(ninja.name, <span class="keyword">typeof</span> ninja.dance); <span class="comment">//24, function</span>
<span class="built_in">console</span>.log(ninja <span class="keyword">instanceof</span> Person); <span class="comment">//true</span>
<span class="built_in">console</span>.log(ninja <span class="keyword">instanceof</span> Ninja); <span class="comment">//true</span>
<span class="built_in">console</span>.log(ninja <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">//true</span>
</code></pre><h1 id="2-_What_happens_when_we_try_to_bind_an_object’s_method_to_a_click_handler?">2. What happens when we try to bind an object’s method to a click handler?</h1>
<pre><code><span class="keyword">var</span> Button = {
  click: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    <span class="keyword">this</span>.clicked = <span class="literal">true</span>;
  }
};

<span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);
elem.innerHTML = <span class="string">"Click me!"</span>;
elem.onclick = Button.click; <span class="comment">//elem copy the function so that when method called elem it's self is the 'this'.</span>
<span class="built_in">document</span>.getElementById(<span class="string">"results"</span>).appendChild(elem);

elem.onclick();    
<span class="built_in">console</span>.log(elem.clicked); <span class="comment">//true. The clicked property was accidentally set on the element.</span>
</code></pre><p>We can use apply() to set clicked = true in Button object.</p>
<pre><code><span class="keyword">var</span> Button = {
  click: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    <span class="keyword">this</span>.clicked = <span class="literal">true</span>;
  }
};

<span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);
elem.innerHTML = <span class="string">"Click me!"</span>;
elem.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{<span class="keyword">return</span> Button.click.apply(Button)}; <span class="comment">//When method called this will point to Button.</span>
<span class="built_in">document</span>.getElementById(<span class="string">"results"</span>).appendChild(elem);

elem.onclick();    
<span class="built_in">console</span>.log(elem.clicked); <span class="comment">//Undefined</span>
</code></pre><h1 id="3-_Add_a_method_to_all_functions_to_allow_context_enforcement-">3. Add a method to all functions to allow context enforcement.</h1>
<pre><code><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
    <span class="keyword">var</span> fn = <span class="keyword">this</span>,
        object = <span class="built_in">Array</span>.prototype.slice.apply(<span class="built_in">arguments</span>).shift();
    <span class="keyword">return</span> fn.call(object, <span class="built_in">arguments</span>);
};
<span class="keyword">var</span> Button = {
    click: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
        <span class="keyword">this</span>.clicked = <span class="literal">true</span>;
    }
};

<span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);
elem.innerHTML = <span class="string">"Click me!"</span>;
elem.onclick = Button.click.bind(Button); 
<span class="built_in">document</span>.getElementById(<span class="string">"results"</span>).appendChild(elem);

elem.click();

<span class="built_in">console</span>.log(elem.clicked, Button.clicked); <span class="comment">//Undefined, true</span>
</code></pre><h1 id="4-_When_to_use_apply()_or_call()?">4. When to use apply() or call()?</h1>
<p>We can assume we have two object superman and child. superman has a fly method which child not. If child wants to use the fly method but also don’t want to write the code then child can use call() to use the method defined in superman.</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">Superman</span><span class="params">()</span> </span>{
    <span class="keyword">this</span>.name = <span class="string">'superman'</span>;
}
Superman.prototype.fly = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
    <span class="built_in">console</span>.log(<span class="string">'My name is '</span> + <span class="keyword">this</span>.name);
};
<span class="keyword">var</span> superman = <span class="keyword">new</span> Superman();
<span class="built_in">console</span>.log(superman.name); <span class="comment">//superman</span>
superman.fly(); <span class="comment">//My name is superman</span>

<span class="keyword">var</span> child = {
    name: <span class="string">'child'</span>
};
superman.fly.call(child); <span class="comment">//My name is child            </span>
</code></pre>]]></content>
    
    
      <category term="javascript" scheme="http://kelunblog.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Everything about Javascript function(6) - Function Prototype and the instance type]]></title>
    <link href="http://kelunblog.com/2014/08/26/Everything-about-Javascript-function(6)---Function-Prototype/"/>
    <id>http://kelunblog.com/2014/08/26/Everything-about-Javascript-function(6)---Function-Prototype/</id>
    <published>2014-08-26T23:35:08.000Z</published>
    <updated>2014-08-27T00:06:51.000Z</updated>
    <content type="html"><![CDATA[<h1 id="1-_Adding_a_prototyped_method_to_a_function">1. Adding a prototyped method to a function</h1>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span><span class="params">()</span></span>{}

Ninja.prototype.swingSword = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    <span class="keyword">return</span> <span class="literal">true</span>;
};

<span class="keyword">var</span> ninjaA = Ninja();
<span class="built_in">console</span>.log( !ninjaA) <span class="comment">//True. Is undefined, not an instance of Ninja.</span>

<span class="keyword">var</span> ninjaB = <span class="keyword">new</span> Ninja();
<span class="built_in">console</span>.log( ninjaB.swingSword()); <span class="comment">//True. Method exists and is callable.</span>
</code></pre><h1 id="2-_Properties_added_in_the_constructor_(or_later)_override_prototyped_properties-">2. Properties added in the constructor (or later) override prototyped properties.</h1>
<pre><code>function <span class="type">Ninja</span>(){
    this.swingSword = function(){
        <span class="keyword">return</span> <span class="literal">true</span>;
    };
}

// <span class="type">Should</span> <span class="keyword">return</span> <span class="literal">false</span>, but will be overridden
<span class="type">Ninja</span>.prototype.swingSword = function(){
    <span class="keyword">return</span> <span class="literal">false</span>;
};

<span class="keyword">var</span> ninja = new <span class="type">Ninja</span>();
console.log( ninja.swingSword()); //<span class="type">Calling</span> the instance <span class="keyword">method</span>, <span class="keyword">not</span> the prototype <span class="keyword">method</span>.
</code></pre><h1 id="3-_The_chainable_method_must_return_this-">3. The chainable method must return this.</h1>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span><span class="params">()</span> </span>{
    <span class="keyword">this</span>.swung = <span class="literal">true</span>;
}

<span class="keyword">var</span> ninjaA = <span class="keyword">new</span> Ninja();
<span class="keyword">var</span> ninjaB = <span class="keyword">new</span> Ninja();

Ninja.prototype.swing = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
    <span class="keyword">this</span>.swung = <span class="literal">false</span>;
    <span class="keyword">return</span> <span class="keyword">this</span>;
};

<span class="built_in">console</span>.log(!ninjaA.swing().swung); <span class="comment">//True. Verify that the swing method exists and returns an instance.;</span>
<span class="built_in">console</span>.log(!ninjaB.swing().swung); <span class="comment">//True. and that it works on all Ninja instances. </span>
</code></pre><h1 id="4-_Examining_the_basic_of_an_object">4. Examining the basic of an object</h1>
<p><code>typeof, instanceof, .constructor() is three important method to examing an object.</code></p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span><span class="params">()</span></span>{};

<span class="keyword">var</span> ninja = <span class="keyword">new</span> Ninja();

<span class="built_in">console</span>.log(<span class="keyword">typeof</span> ninja, ninja <span class="keyword">instanceof</span> Ninja, ninja.constructor == Ninja);<span class="comment">// object, true ,true</span>
</code></pre><h1 id="5-_Use_constructor_to_build_other_instances-">5. Use constructor to build other instances.</h1>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span><span class="params">()</span></span>{};

<span class="keyword">var</span> ninja = <span class="keyword">new</span> Ninja();
<span class="keyword">var</span> ninjaB = <span class="keyword">new</span> ninja.constructor();

<span class="built_in">console</span>.log(ninjaB <span class="keyword">instanceof</span> Ninja);<span class="comment">// true</span>
</code></pre>]]></content>
    
    
      <category term="javascript" scheme="http://kelunblog.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Everything about javascript(5) - Temporary Scope ]]></title>
    <link href="http://kelunblog.com/2014/08/25/Everything-about-javascript(5)---Temporary-Scope-/"/>
    <id>http://kelunblog.com/2014/08/25/Everything-about-javascript(5)---Temporary-Scope-/</id>
    <published>2014-08-25T23:20:09.000Z</published>
    <updated>2014-08-26T22:59:35.000Z</updated>
    <content type="html"><![CDATA[<h1 id="1-_Isolate_scope:_Self-executing_function">1. Isolate scope: Self-executing function</h1>
<p>We can’t access the variable inside a self-executing function.</p>
<pre><code>(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
    <span class="keyword">var</span> count = <span class="number">0</span>;

    <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
        <span class="keyword">if</span> (count &lt; <span class="number">5</span>) {
            <span class="built_in">console</span>.log(<span class="string">"Timer call: "</span>, count);
            count++;
        } <span class="keyword">else</span> {
            <span class="built_in">console</span>.log(count == <span class="number">5</span>); <span class="comment">//true. Count came via a closure, accessed each step.</span>
            <span class="built_in">console</span>.log(<span class="keyword">typeof</span> timer); <span class="comment">//object. The timer reference is also via a closure.</span>
            clearInterval(timer);
        }
    }, <span class="number">100</span>);
})();

<span class="built_in">console</span>.log(<span class="keyword">typeof</span> count); <span class="comment">//undefined. count doesn't exist outside the wrapper</span>
<span class="built_in">console</span>.log(<span class="keyword">typeof</span> timer); <span class="comment">//undefined. neither does timer</span>
</code></pre><p>We can use this feature to wrap a libary:</p>
<pre><code>var myLib = (<span class="keyword">function</span>(){ 
  <span class="keyword">function</span> myLib(){ 
    // Initialize 
  } 

  // <span class="keyword">...</span> 

  <span class="keyword">return</span> myLib; 
})(); 
</code></pre><h1 id="2-_Use_self-executing_function_inside_a_loop">2. Use self-executing function inside a loop</h1>
<p>A for loop is one of the most frequently used statements in programming languages, and setTimeout() is often used in Javascript to delay the execution of a function. Together they could mean unexpected results if we didn’t fully understand how they work.</p>
<pre><code><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) {
    setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{ <span class="built_in">console</span>.log(i); },     <span class="number">1000</span>*i);     <span class="comment">// 6 6 6 6 6</span>
}
</code></pre><p>The above code seems like the obvious answer. We put console.log(i) within an anonymous function inside a setTimeout() function, and set each setTimeout() to be delayed 1 to 5 seconds (1000 x 1, 1000 x 2…) respectively. However, as soon as we run that codes, we know something is wrong. The numbers are each outputting to console 1 second after another consecutively, but they are all 6s. So we now have 6 6 6 6 6 as the end result.</p>
<p>The problem resides in the variable i we’re passing into setTimeout(). In this case, we’re simply passing the reference to the variable i, and not the actual value at the moment inside each loop. Therefore, by the time the setTimeout() function is executed (after 1, 2, 3, 4, and 5 seconds in this case), the for statement has already been executed and incremented i to the final value of 6.</p>
<p>To properly address this issue and achieve our intended behavior, we need to pass into setTimeout() the actual value of i at the moment of each loop execution in the for statement. We can use another anonymous function as a wrapper to help accomplish that:</p>
<pre><code><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) {
    (<span class="function"><span class="keyword">function</span><span class="params">(index)</span></span>{
        setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
            <span class="built_in">console</span>.log(index); <span class="comment">//0,1,2,3,4,5</span>
        }, i * <span class="number">1000</span>);
    })(i);
}           
</code></pre>]]></content>
    
    
      <category term="javascript" scheme="http://kelunblog.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Everything about javascript function(4) - Flexible Arguments]]></title>
    <link href="http://kelunblog.com/2014/08/23/Everything-about-javascript-function(4)---Flexible-Arguments/"/>
    <id>http://kelunblog.com/2014/08/23/Everything-about-javascript-function(4)---Flexible-Arguments/</id>
    <published>2014-08-24T03:21:42.000Z</published>
    <updated>2014-08-25T01:18:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="1-_Using_a_variable_number_of_arguments_to_our_advantage-">1. Using a variable number of arguments to our advantage.</h1>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">flat</span><span class="params">(root)</span> </span>{
    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) {
        <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> <span class="built_in">arguments</span>[i]) {
            root[key] = <span class="built_in">arguments</span>[i][key];
        }
    }
    <span class="keyword">return</span> root;
}

<span class="built_in">console</span>.log(flat({<span class="string">'zkl'</span>:<span class="string">'great'</span>}, {<span class="string">'others'</span>: <span class="string">'?'</span>})); <span class="comment">//{ zkl: 'great', others: '?' }</span>
</code></pre><h1 id="2-_Use_apply()_to_find_the_Min/Max_number_in_an_array-">2. Use apply() to find the Min/Max number in an array.</h1>
<p>If you want to pass all values in array as parameter， you should use .apply().</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">findMax</span><span class="params">(array)</span> </span>{
    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.max.apply(<span class="keyword">this</span>, array));
}
<span class="function"><span class="keyword">function</span> <span class="title">findMin</span><span class="params">(array)</span> </span>{
    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.min.apply(<span class="keyword">this</span>, array));
}

findMax([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>]); <span class="comment">// 9</span>
findMin([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>]); <span class="comment">// 1 </span>
</code></pre><p>There’s another way to do this: use arguments.</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">findMax2</span><span class="params">()</span> </span>{
    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.max.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>));
}

findMax2(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>); <span class="comment">//9      </span>
</code></pre><p>arguments is similar to array but it’s not an array.     </p>
<h1 id="3-_How_to_sort_an_array_using_arguments_?">3. How to sort an array using arguments ?</h1>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">sortArguments</span><span class="params">()</span> </span>{
    <span class="built_in">arguments</span>.sort(<span class="function"><span class="keyword">function</span><span class="params">(a ,b)</span> </span>{
        <span class="keyword">return</span> b - a;
    });
}

<span class="built_in">console</span>.log(sortArguments(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>)); <span class="comment">//error</span>
</code></pre><p>There will be an error because arguments is not actually an array so it does’t have the sort() method.<br>So what we need to do is first convert this array-like object(arguments) to an array. This can be done using slice() method.</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">sortArguments</span><span class="params">()</span> </span>{
    <span class="keyword">return</span> makeArray(<span class="built_in">arguments</span>).sort(<span class="function"><span class="keyword">function</span><span class="params">(a ,b)</span> </span>{
        <span class="keyword">return</span> b - a;
    });
}

<span class="function"><span class="keyword">function</span> <span class="title">makeArray</span><span class="params">(array)</span> </span>{
    <span class="keyword">return</span> [].slice.call(array);<span class="comment">//1.Equals to Array.prototype.slice.call(arguments, 0) 2.This function returns an array</span>
}

<span class="built_in">console</span>.log(sortArguments(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>)); <span class="comment">//[ 7, 5, 3, 2, 1, 1 ]    </span>
</code></pre><h1 id="4-_Implement_a_multiplication_function_(first_argument_by_largest_number)-">4. Implement a multiplication function (first argument by largest number).</h1>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">multiMax</span><span class="params">(multi)</span> </span>{
    <span class="keyword">var</span> allButFirst = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);
    <span class="keyword">var</span> largestAllButFirst = <span class="built_in">Math</span>.max.apply(<span class="keyword">this</span>, allButFirst);
    <span class="keyword">return</span> multi * largestAllButFirst;
}

<span class="built_in">console</span>.log(multiMax(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">21</span>,<span class="number">32</span>,<span class="number">654</span>,<span class="number">432</span>));    
</code></pre>]]></content>
    
    
      <category term="javascript" scheme="http://kelunblog.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Everything about javascript function(3): Instantiation]]></title>
    <link href="http://kelunblog.com/2014/08/19/Everything-about-javascript-function(3)-Instantiation/"/>
    <id>http://kelunblog.com/2014/08/19/Everything-about-javascript-function(3)-Instantiation/</id>
    <published>2014-08-20T02:58:13.000Z</published>
    <updated>2014-08-20T02:58:48.000Z</updated>
    <content type="html"><![CDATA[<h1 id="1-What_does_the_new_operator_do">1.What does the new operator do</h1>
<p>Very good resoure:<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="external">MDN:new operator</a></p>
<p>The new operator creates an instance of a user-defined object type or of one of the built-in object types that has a constructor function.</p>
<pre><code><span class="reserved">function</span> Ninja() {
    <span class="keyword">this</span>.name = <span class="string">'haha'</span>;
}

<span class="reserved">var</span> ninja = Ninja();
<span class="built_in">console</span>.log(!ninja); <span class="regexp">//</span><span class="literal">true</span>. Is <span class="literal">undefined</span>, <span class="keyword">not</span> an instance <span class="keyword">of</span> Ninja.

<span class="reserved">var</span> ninja2 = <span class="keyword">new</span> Ninja();
<span class="built_in">console</span>.log(!ninja2); <span class="regexp">//</span><span class="literal">false</span>. ninja2 <span class="keyword">is</span> an instance <span class="keyword">of</span> Ninja
</code></pre><h1 id="2-How_‘this’_worked_in_function?">2.How ‘this’ worked in function?</h1>
<p>For more detail describtion: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="external">MDN: this</a></p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span><span class="params">()</span></span>{
    <span class="keyword">this</span>.swung = <span class="literal">false</span>;

    <span class="comment">// Should return true</span>
    <span class="keyword">this</span>.swingSword = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
        <span class="keyword">this</span>.swung = !<span class="keyword">this</span>.swung; <span class="comment">//Use the property of closure</span>
        <span class="keyword">return</span> <span class="keyword">this</span>.swung;
    };
}

<span class="keyword">var</span> ninja = <span class="keyword">new</span> Ninja();
<span class="built_in">console</span>.log( ninja.swingSword()); <span class="comment">//True. Calling the instance method.</span>
<span class="built_in">console</span>.log( ninja.swung); <span class="comment">//True. The ninja has swung the sword.</span>

<span class="keyword">var</span> ninjaB = <span class="keyword">new</span> Ninja();
<span class="built_in">console</span>.log( !ninjaB.swung); <span class="comment">//True. Make sure that the ninja has not swung his sword.</span>
</code></pre><h1 id="3-What_will_happen_if_we_forget_to_use_new_operator?">3.What will happen if we forget to use new operator?</h1>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">User</span><span class="params">(first, last)</span> </span>{
    <span class="keyword">this</span>.name = first + <span class="string">' '</span> + last;
}
<span class="keyword">var</span> name = <span class="string">'zkl'</span>;
<span class="keyword">var</span> user = User(<span class="string">"John"</span>, <span class="string">"snow"</span>); <span class="comment">//This function will be called when assign it to a variable</span>
<span class="built_in">console</span>.log(<span class="keyword">typeof</span> user); <span class="comment">//undefined</span>
<span class="built_in">console</span>.log(<span class="built_in">window</span>.name, name); <span class="comment">//John snow John snow. The name variable is accidentally overridden.   </span>
</code></pre><p>We need to prevent this happend, but how? Let’s see the code below:</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">User</span><span class="params">(first, last)</span></span>{ 
  <span class="keyword">if</span> ( !(<span class="keyword">this</span> <span class="keyword">instanceof</span> User) ) 
       <span class="keyword">return</span> <span class="keyword">new</span> User(first, last); 

  <span class="keyword">this</span>.name = first + <span class="string">" "</span> + last; 
} 

<span class="keyword">var</span> name = <span class="string">"Resig"</span>; 
<span class="keyword">var</span> user = User(<span class="string">"John"</span>, name);
</code></pre><p>We can also use arguments.callee:</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">User</span><span class="params">(first, last)</span></span>{ 
  <span class="keyword">if</span> ( !(<span class="keyword">this</span> <span class="keyword">instanceof</span> <span class="built_in">arguments</span>.callee) ) 
    <span class="keyword">return</span> <span class="keyword">new</span> User(first, last); 

  <span class="keyword">this</span>.name = first + <span class="string">" "</span> + last; 
} 

<span class="keyword">var</span> name = <span class="string">"Resig"</span>; 
<span class="keyword">var</span> user = User(<span class="string">"John"</span>, name);          
</code></pre>]]></content>
    
    
      <category term="javascript" scheme="http://kelunblog.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Everything about Javascript function(2): Function and Object]]></title>
    <link href="http://kelunblog.com/2014/08/17/Everything-about-Javascript-function(2)-Function-and-Object/"/>
    <id>http://kelunblog.com/2014/08/17/Everything-about-Javascript-function(2)-Function-and-Object/</id>
    <published>2014-08-18T02:03:00.000Z</published>
    <updated>2014-08-18T02:03:59.000Z</updated>
    <content type="html"><![CDATA[<h1 id="1-Functions_and_Objects_are_similar">1.Functions and Objects are similar</h1>
<pre><code><span class="keyword">var</span> obj = {};
<span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{};
obj.prop = <span class="string">"some value"</span>;
fn.prop = <span class="string">"some value"</span>;
<span class="built_in">console</span>.log(obj.prop === fn.prop); <span class="comment">//true</span>
</code></pre><h1 id="2-How_“this”_worked_in_function_and_object?">2.How “this” worked in function and object?</h1>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">katana</span><span class="params">()</span></span>{
    <span class="keyword">this</span>.isSharp = <span class="literal">true</span>;
}
katana();
<span class="built_in">console</span>.log(isSharp); <span class="comment">// true. Defined in global object (window object)</span>


<span class="keyword">var</span> shuriken = {
    toss: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
        <span class="keyword">this</span>.isSharp = <span class="literal">true</span>;
    }
};
shuriken.toss();
<span class="built_in">console</span>.log(shuriken.isSharp); <span class="comment">//ture. Denfined in object</span>
</code></pre><h1 id="3-_Call()_and_apply()_function">3. Call() and apply() function</h1>
<h2 id="First_thing_first:_How_call()_work?">First thing first: How call() work?</h2>
<p>From the book <code>Javascript: the definittive guide</code> there is an example of call(): To pass two numbers to the function f() and invoke it as if it were a method of thr object o, you can use the code like this :</p>
<pre><code><span class="keyword">f</span>.<span class="built_in">call</span>(<span class="keyword">o</span>, <span class="number">1</span>, <span class="number">2</span>);
</code></pre><p>This is similar to the following lines of code:</p>
<pre><code>o.m = f;
o.m(1, 2);
<span class="operator"><span class="keyword">delete</span> o.m;</span>    
</code></pre><p>Let’s see another example:</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(a, b)</span></span>{
    <span class="keyword">return</span> a + b;
}

<span class="built_in">console</span>.log( add.call(<span class="keyword">this</span>, <span class="number">1</span>, <span class="number">2</span>) == <span class="number">3</span>); <span class="comment">//true .call() takes individual arguments</span>

<span class="built_in">console</span>.log( add.apply(<span class="keyword">this</span>, [<span class="number">1</span>, <span class="number">2</span>]) == <span class="number">3</span>); <span class="comment">//true .apply() takes an array of arguments </span>
</code></pre>]]></content>
    
    
      <category term="javascript" scheme="http://kelunblog.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Everything about javascript function(1)]]></title>
    <link href="http://kelunblog.com/2014/08/12/Everything-about-javascript-function(1)/"/>
    <id>http://kelunblog.com/2014/08/12/Everything-about-javascript-function(1)/</id>
    <published>2014-08-13T00:47:52.000Z</published>
    <updated>2014-08-13T15:03:40.000Z</updated>
    <content type="html"><![CDATA[<h1 id="1-Three_ways_to_define_function">1.Three ways to define function</h1>
<pre><code>  <span class="function"><span class="keyword">function</span> <span class="title">isNimble</span><span class="params">()</span></span>{ <span class="keyword">return</span> <span class="literal">true</span>; }; <span class="comment">//function definition(declaration)</span>
  <span class="keyword">var</span> canFly = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{ <span class="keyword">return</span> <span class="literal">true</span>; }; <span class="comment">//function expression</span>
  <span class="built_in">window</span>.isDeadly = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{ <span class="keyword">return</span> <span class="literal">true</span>; }; <span class="comment">//assign function to object</span>
</code></pre><h1 id="2-Does_the_order_of_function_definition_matter?">2.Does the order of function definition matter?</h1>
<p>It doesn’t matter! Look at the code below:</p>
<pre><code><span class="keyword">var</span> canFly = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{ <span class="keyword">return</span> <span class="literal">true</span>; }; 
<span class="built_in">window</span>.isDeadly = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{ <span class="keyword">return</span> <span class="literal">true</span>; }; 
isNimble() &amp;&amp; canFly() &amp;&amp; isDeadly(); <span class="comment">//true</span>
<span class="function"><span class="keyword">function</span> <span class="title">isNimble</span><span class="params">()</span></span>{ <span class="keyword">return</span> <span class="literal">true</span>; } 
</code></pre><h1 id="3-Where_can_assignments_be_accessed?">3.Where can assignments be accessed?</h1>
<p>The order is matter!</p>
<pre><code><span class="keyword">typeof</span> canFly == <span class="string">"undefined"</span>; <span class="comment">//true</span>
<span class="keyword">typeof</span> isDeadly == <span class="string">"undefined"</span>;  <span class="comment">//true</span>
<span class="keyword">var</span> canFly = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{ <span class="keyword">return</span> <span class="literal">true</span>; }; 
<span class="built_in">window</span>.isDeadly = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{ <span class="keyword">return</span> <span class="literal">true</span>; };
</code></pre><h1 id="4-Functions_be_defined_below_return_statements">4.Functions be defined below return statements</h1>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">stealthCheck</span><span class="params">()</span></span>{ 
  stealth(); 

  <span class="keyword">return</span> stealth(); 

  <span class="function"><span class="keyword">function</span> <span class="title">stealth</span><span class="params">()</span></span>{ <span class="keyword">return</span> <span class="literal">true</span>; } 
} 

stealthCheck(); <span class="comment">//true</span>
</code></pre><h1 id="5-What_is_the_name_of_a_function?">5.What is the name of a function?</h1>
<pre><code><span class="keyword">var</span> ninja = <span class="function"><span class="keyword">function</span> <span class="title">myNinja</span><span class="params">()</span> </span>{
    <span class="keyword">return</span> ninja === myNinja; 
};
<span class="built_in">console</span>.log(ninja()); <span class="comment">//True. This function is named two things - at once!</span>
<span class="built_in">console</span>.log(<span class="keyword">typeof</span> myNinja === <span class="string">"undefined"</span>); <span class="comment">//True. Because myNinja isn't defined outside of the function."</span>
</code></pre>]]></content>
    
    
      <category term="javascript function" scheme="http://kelunblog.com/tags/javascript-function/"/>
    
      <category term="javascript" scheme="http://kelunblog.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Global variable in javascript]]></title>
    <link href="http://kelunblog.com/2014/08/04/Global-variable-in-javascript/"/>
    <id>http://kelunblog.com/2014/08/04/Global-variable-in-javascript/</id>
    <published>2014-08-04T14:38:30.000Z</published>
    <updated>2014-08-07T19:47:21.000Z</updated>
    <content type="html"><![CDATA[<p>This blog mainly talk about how global variable works in Javascript.</p>
<h1 id="1-_Two_same_way_to_assign_global_variable-">1. Two same way to assign global variable.</h1>
<h2 id="The_most_comman_way-">The most comman way.</h2>
<pre><code><span class="keyword">var</span> myvar = <span class="number">5</span>;
<span class="function"><span class="keyword">function</span> <span class="title">myFunction</span><span class="params">()</span>
       <span class="title">alert</span><span class="params">(myvar)</span></span>; <span class="comment">// 5</span>
}
</code></pre><h2 id="Use_window_object">Use window object</h2>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">setValue</span><span class="params">()</span>
</span>{
    <span class="built_in">window</span>.myValue = <span class="string">"test"</span>;
}

<span class="function"><span class="keyword">function</span> <span class="title">getValue</span><span class="params">()</span>
</span>{
    alert(<span class="built_in">window</span>.myValue); <span class="comment">// "test" (assuming     setValue has run)</span>
}    
</code></pre><p>when a global variable is set, it’s added to the window object.</p>
<pre><code><span class="keyword">var</span> myValue;
<span class="function"><span class="keyword">function</span> <span class="title">setValue</span><span class="params">()</span>
</span>{
    myValue = <span class="string">"test"</span>;
}

<span class="function"><span class="keyword">function</span> <span class="title">getValue</span><span class="params">()</span>
</span>{
    alert(<span class="built_in">window</span>.myValue); <span class="comment">// yup, it's "test"</span>
}
</code></pre><h1 id="2-_A_safer_way_to_assign_global_variable-">2. A safer way to assign global variable.</h1>
<pre><code><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{ <span class="comment">// Begin scoping function</span>
    <span class="keyword">var</span> yourGlobalVariable; <span class="comment">// Global to your code, invisible outside the scoping function</span>
    <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>{
        <span class="comment">// ...</span>
    }
})();         <span class="comment">// End scoping function</span>
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</code></pre>]]></content>
    
    
      <category term="global variable" scheme="http://kelunblog.com/tags/global-variable/"/>
    
      <category term="javascript" scheme="http://kelunblog.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Github总结]]></title>
    <link href="http://kelunblog.com/2014/08/01/Github%E6%80%BB%E7%BB%93/"/>
    <id>http://kelunblog.com/2014/08/01/Github总结/</id>
    <published>2014-08-01T23:50:14.000Z</published>
    <updated>2014-08-07T19:46:48.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Gitgub_总结">Gitgub 总结</h1>
<h2 id="1-远程仓库相关命令">1.远程仓库相关命令</h2>
<ul>
<li>检出仓库：$ git clone git://github.com/jquery/jquery.git</li>
<li>查看远程仓库：$ git remote -v</li>
<li>添加远程仓库：$ git remote add [name] [url]</li>
<li>删除远程仓库：$ git remote rm [name]</li>
<li>修改远程仓库：$ git remote set-url —push [name] [newUrl]</li>
<li>拉取远程仓库：$ git pull [remoteName] [localBranchName]</li>
<li><p>推送远程仓库：$ git push [remoteName] [localBranchName]</p>
<p>如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：</p>
<ul>
<li>$ git push origin test:master         // 提交本地test分支作为远程的master分支</li>
<li>$ git push origin test:test           // 提交本地test分支作为远程的test分支</li>
</ul>
</li>
</ul>
<h2 id="2-_分支(branch)操作相关命令">2. 分支(branch)操作相关命令</h2>
<ul>
<li>查看本地分支：$ git branch</li>
<li>查看远程分支：$ git branch -r （如果还是看不到就先 git fetch origin 先）</li>
<li>创建本地分支：$ git branch [name] ——注意新分支创建后不会自动切换为当前分支</li>
<li>切换分支：$ git checkout [name]</li>
<li>创建新分支并立即切换到新分支：$ git checkout -b [name]</li>
<li>直接检出远程分支：$ git checkout -b [name] [remoteName] (如：git checkout -b myNewBranch origin/dragon)</li>
<li>删除分支：$ git branch -d [name] —— -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项</li>
<li>合并分支：$ git merge [name] ——将名称为[name]的分支与当前分支合并</li>
<li>合并最后的2个提交：$ git rebase -i HEAD~2 —— 数字2按需修改即可（如果需提交到远端$ git push -f origin master 慎用！）</li>
<li>创建远程分支(本地分支push到远程)：$ git push origin [name]</li>
<li><p>删除远程分支：$ git push origin :heads/[name] 或 $ git push origin :[name] </p>
</li>
<li><p>创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)<br>$ git symbolic-ref HEAD refs/heads/[name]<br>$ rm .git/index<br>$ git clean -fdx    </p>
</li>
</ul>
]]></content>
    
    
      <category term="github" scheme="http://kelunblog.com/tags/github/"/>
    
      <category term="github" scheme="http://kelunblog.com/categories/github/"/>
    
  </entry>
  
</feed>
